{"version":3,"sources":["api/triviaApi.js","components/Cards.jsx","components/Home.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["getQuestions","amount","category","difficulty","a","fetch","method","response","ok","json","questions","error","Error","entities","options","0","1","2","3","Cards","state","incorrect_answers","props","question","correct_answer","answers","array","i","length","j","Math","floor","random","this","push","shuffleArray","setState","prevProps","Card","Header","Accordion","Toggle","as","Button","eventKey","style","width","replace","match","map","answer","index","toString","Collapse","Body","Component","Home","parameter","noOfQues","handleSubmit","e","preventDefault","results","inputOnChange","target","id","value","Form","onSubmit","Group","Label","Control","type","defaultValue","onChange","className","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfedcc09.chunk.js","sourcesContent":["export async function getQuestions(amount, category, difficulty) {\r\n  try {\r\n    const response = await fetch(\r\n      `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}`,\r\n      { method: \"GET\" }\r\n    );\r\n    if (response.ok) {\r\n      const questions = await response.json();\r\n      return questions;\r\n    } else {\r\n      const error = await response.json();\r\n\r\n      throw new Error(error);\r\n    }\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Accordion, Button, Card } from \"react-bootstrap\";\r\n\r\nconst entities = {\r\n  \"&#039;\": \"'\",\r\n  \"&quot;\": '\"',\r\n  \"&shy;\": \"\",\r\n  // add more if needed\r\n};\r\n\r\nconst options = {\r\n  0: \"A\",\r\n  1: \"B\",\r\n  2: \"C\",\r\n  3: \"D\",\r\n};\r\n\r\nexport default class Cards extends Component {\r\n  state = {\r\n    incorrect_answers: this.props.question.incorrect_answers,\r\n    correct_answer: this.props.question.correct_answer,\r\n    answers: [],\r\n  };\r\n\r\n  shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const answers = this.state.incorrect_answers;\r\n    answers.push(this.state.correct_answer);\r\n    this.shuffleArray(answers);\r\n    this.setState({ answers: answers });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.question !== prevProps.question) {\r\n      this.setState({\r\n        incorrect_answers: this.props.question.incorrect_answers,\r\n        correct_answer: this.props.question.correct_answer,\r\n        answers: [],\r\n      });\r\n      const answers = this.props.question.incorrect_answers;\r\n      answers.push(this.props.question.correct_answer);\r\n      this.shuffleArray(answers);\r\n      this.setState({ answers: answers });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Card>\r\n          <Card.Header>\r\n            <Accordion.Toggle\r\n              as={Button}\r\n              eventKey={this.props.eventKey}\r\n              style={{ width: \"100%\" }}\r\n            >\r\n              <h3>\r\n                {this.props.question.question.replace(\r\n                  /&#?\\w+;/g,\r\n                  (match) => entities[match]\r\n                )}\r\n              </h3>\r\n              <div>\r\n                {this.state.answers.map((answer, index) => {\r\n                  return (\r\n                    <p key={index}>\r\n                      {index\r\n                        .toString()\r\n                        .replace(/^[0-9]+$/g, (match) => options[match])}\r\n                      : {answer.replace(/&#?\\w+;/g, (match) => entities[match])}\r\n                    </p>\r\n                  );\r\n                })}\r\n              </div>\r\n            </Accordion.Toggle>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey={this.props.eventKey}>\r\n            <Card.Body>{this.state.correct_answer}</Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Accordion, Button, Form } from \"react-bootstrap\";\r\nimport { getQuestions } from \"../api/triviaApi\";\r\nimport Cards from \"./Cards\";\r\n\r\nexport default class Home extends Component {\r\n  state = {\r\n    parameter: {\r\n      noOfQues: \"10\",\r\n      category: \"9\",\r\n      difficulty: \"easy\",\r\n    },\r\n    questions: [],\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const questions = await getQuestions(\r\n      this.state.parameter.noOfQues,\r\n      this.state.parameter.category,\r\n      this.state.parameter.difficulty\r\n    );\r\n    this.setState({ questions: questions.results });\r\n  };\r\n\r\n  inputOnChange = (e) => {\r\n    this.setState({\r\n      parameter: { ...this.state.parameter, [e.target.id]: e.target.value },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Number of Questions</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              defaultValue=\"10\"\r\n              id=\"noOfQues\"\r\n              onChange={this.inputOnChange}\r\n            />\r\n            <Form.Label>Select Category</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              onChange={this.inputOnChange}\r\n              id=\"category\"\r\n            >\r\n              <option value=\"9\">General Knowledge</option>\r\n              <option value=\"10\">Entertainment: Books</option>\r\n              <option value=\"11\">Entertainment: Film</option>\r\n              <option value=\"12\">Entertainment: Music</option>\r\n              <option value=\"13\">Entertainment: Musicals &amp; Theatres</option>\r\n              <option value=\"14\">Entertainment: Television</option>\r\n              <option value=\"15\">Entertainment: Video Games</option>\r\n              <option value=\"16\">Entertainment: Board Games</option>\r\n              <option value=\"17\">Science &amp; Nature</option>\r\n              <option value=\"18\">Science: Computers</option>\r\n              <option value=\"19\">Science: Mathematics</option>\r\n              <option value=\"20\">Mythology</option>\r\n              <option value=\"21\">Sports</option>\r\n              <option value=\"22\">Geography</option>\r\n              <option value=\"23\">History</option>\r\n              <option value=\"24\">Politics</option>\r\n              <option value=\"25\">Art</option>\r\n              <option value=\"26\">Celebrities</option>\r\n              <option value=\"27\">Animals</option>\r\n              <option value=\"28\">Vehicles</option>\r\n              <option value=\"29\">Entertainment: Comics</option>\r\n              <option value=\"30\">Science: Gadgets</option>\r\n              <option value=\"31\">\r\n                Entertainment: Japanese Anime &amp; Manga\r\n              </option>\r\n              <option value=\"32\">\r\n                Entertainment: Cartoon &amp; Animations\r\n              </option>\r\n            </Form.Control>\r\n            <Form.Label>Select Difficulty</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              onChange={this.inputOnChange}\r\n              id=\"difficulty\"\r\n            >\r\n              <option value=\"easy\">Easy</option>\r\n              <option value=\"medium\">Medium</option>\r\n              <option value=\"hard\">Hard</option>\r\n            </Form.Control>\r\n          </Form.Group>\r\n          <Button type=\"submit\">Get Questions</Button>\r\n        </Form>\r\n        <Accordion className=\"mt-3\">\r\n          {this.state.questions.map((question, index) => {\r\n            return (\r\n              <Cards question={question} key={index} eventKey={index + 1} />\r\n            );\r\n          })}\r\n        </Accordion>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport Home from \"./components/Home\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container } from \"react-bootstrap\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Home />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}